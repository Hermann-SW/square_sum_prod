#!/bin/bash
rm *.info *.out
make clean
make ecm
echo -e "**** ECM ****" > coverage.out
./ecm "10**150000" >> coverage.out
./ecm "10**300000" >> coverage.out
./ecm "(3-2))" >> coverage.out
./ecm "((3-2)" >> coverage.out
./ecm "gcd(20)" >> coverage.out
./ecm "gcd(20, 30, 50)" >> coverage.out
./ecm "gcd(20, 0, 50)" >> coverage.out
./ecm "lcm(20)" >> coverage.out
./ecm "lcm(20, 0, 50)" >> coverage.out
./ecm "sqrt(-2)" >> coverage.out
./ecm "2/0" >> coverage.out
./ecm "23.8" >> coverage.out
./ecm "10**38-1040759" >> coverage.out
./ecm "isprime(-3)+isprime(-2)*2+isprime(-1)*4+isprime(0)*8+isprime(1)*16+isprime(2)*32+isprime(3)*64" >> coverage.out
./ecm "187072209578355573530071658587684226515959365494067" >> coverage.out
./ecm "10000000000000000000000000000000000000000000000013892731" >> coverage.out
./ecm "221313+sumdigits(23,10)+numdigits(232,10)+revdigits(765,10)+gcd(8,6)+minfact(143)+totient(226)+jacobi(3,7)+modpow(3,8,29)" >> coverage.out
./ecm "n(10^30+2)*n(3*10^30+10000)" >> coverage.out
./ecm "10**59+213" 1 >> coverage.out
./ecm "p(655) % 65657578" >> coverage.out
./ecm "modinv(6,13)-numdivs(45)+sumdivs(343)+maxfact(765)+numfact(765)+concatfact(0,36)+concatfact(0,36)+concatfact(1,36)+concatfact(2,36)+concatfact(3,36)+isprime(811)" >> coverage.out
./ecm "b(223)+n(434)+f(44)-l(56)+23!-18#" >>coverage.out
./ecm "(23 shl 5) + (712 shr 6) + (23 OR 556) + (57 AND 21) + (NOT 15) + (38 XOR 79) + 4434/115 - 28%13" >>coverage.out
./ecm "(6 > 5)*32 + (6 >= 5)*16 + (6 < 5)*8 + (6 <= 5)*4 + (6 == 5)*2 + (6 != 5)" >>coverage.out
./ecm "(7 > 7)*32 + (7 >= 7)*16 + (7 < 7)*8 + (7 <= 7)*4 + (7 == 7)*2 + (7 != 7)" >>coverage.out
./ecm "x=3; x=n(x); c<=10; x-1" >> coverage.out
./ecm "sqrt(10^10000)-10^5000" >> coverage.out
./ecm "modpow(10, 2, 10**23) + modpow(10, 2, 2*10**130)" >> coverage.out
./ecm "0x43245 + 0x3434" >> coverage.out
./ecm "10^600 / 10^300" >> coverage.out
./ecm "3**333+1" >> coverage.out
./ecm "2**142+1" >> coverage.out
./ecm "7**(7*23)+1" >> coverage.out
./ecm "2**360-1" >> coverage.out
./ecm "10^1000/10^700" >> coverage.out
./ecm "x" >> coverage.out
./ecm "x=" >> coverage.out
./ecm "x=23" >> coverage.out
./ecm "x=23;13" >> coverage.out
./ecm "x=23;x=x+1" >> coverage.out
./ecm "x=23;x=x+1;x-10;u" >> coverage.out
./ecm "x=23;x=x+1;x-10;x+2" >> coverage.out
./ecm "x=23;x=x+1;23;x+2" >> coverage.out
./ecm "x=1;x=x+1;x<10000;x;sumdigits(x,10) == sumdigits(concatfact(2,x),10) and not isprime(x)" >> coverage.out
lcov --capture --directory . --output-file ecm.info
make clean
make blockly
./blockly xml.txt 0 >> coverage.out
./blockly xml.txt 1 >> coverage.out
./blockly xml.txt 2 >> coverage.out
./blockly xml.txt 3 >> coverage.out
./blockly xml.txt 4 >> coverage.out
./blockly xml.txt 5 >> coverage.out
./blockly xml.txt 6 >> coverage.out
./blockly xml.txt 7 >> coverage.out
./blockly xml.txt 8 >> coverage.out
./blockly xml.txt 9 >> coverage.out
./blockly xml.txt 10 >> coverage.out
./blockly xml.txt 11 >> coverage.out
./blockly xml.txt 12 >> coverage.out
./blockly xml.txt 13 >> coverage.out
lcov --capture --directory . --output-file blockly.info
make clean
make polfact
echo -e "\n\n**** POLFACT ****" >> coverage.out
./polfact 0 "x^120-1" 0 >> coverage.out
./polfact 0 "x^120-1" 1 >> coverage.out
./polfact 0 "x^120-1" 2 >> coverage.out
./polfact 7 "x^10+x^5-1" 0 >> coverage.out
./polfact 7 "x^10+x^5-1" 1 >> coverage.out
./polfact 7 "x^10+x^5-1" 2 >> coverage.out
./polfact 0 "x+23" 0 >> coverage.out
./polfact 0 "x+23" 1 >> coverage.out
./polfact 0 "x+23" 2 >> coverage.out
./polfact 0 "(2*x+23)*(3x+5)" 0 >> coverage.out
./polfact 0 "(2*x+23)*(3x+5)" 1 >> coverage.out
./polfact 0 "(2*x+23)*(3x+5)" 2 >> coverage.out
./polfact 0 "x^2+7*x+23" 0 >> coverage.out
./polfact 0 "x^2+7*x+23" 1 >> coverage.out
./polfact 0 "x^2+7*x+23" 2 >> coverage.out
./polfact 0 "x^3-4*x^2+12*x+23" 0 >> coverage.out
./polfact 0 "x^3-4*x^2+12*x+23" 1 >> coverage.out
./polfact 0 "x^3-4*x^2+12*x+23" 2 >> coverage.out
./polfact 0 "x^3-x^2+2x+5" 0 >> coverage.out
./polfact 0 "x^3-x^2+2x+5" 1 >> coverage.out
./polfact 0 "x^3-x^2+2x+5" 2 >> coverage.out
./polfact 0 "x^3+2" 0 >> coverage.out
./polfact 0 "x^3+2" 1 >> coverage.out
./polfact 0 "x^3+2" 2 >> coverage.out
./polfact 0 "x^3-2" 0 >> coverage.out
./polfact 0 "x^3-2" 1 >> coverage.out
./polfact 0 "x^3-2" 2 >> coverage.out
./polfact 0 "x^3+6*x^2+18" 0 >> coverage.out
./polfact 0 "x^3+6*x^2+18" 1 >> coverage.out
./polfact 0 "x^3+6*x^2+18" 2 >> coverage.out
./polfact 0 "3x**3+3x**2+x-5" 2 >> coverage.out
./polfact 0 "x^3-12x^2+12x+23" 0 >> coverage.out
./polfact 0 "x^3-12x^2+12x+23" 1 >> coverage.out
./polfact 0 "x^3-12x^2+12x+23" 2 >> coverage.out
./polfact 0 "x^4+3*x^2+12*x+23" 0 >> coverage.out
./polfact 0 "x^4+3*x^2+12*x+23" 1 >> coverage.out
./polfact 0 "x^4+3*x^2+12*x+23" 2 >> coverage.out
./polfact 0 "x^4+4*x^2+23" 0 >> coverage.out
./polfact 0 "x^4+4*x^2+23" 1 >> coverage.out
./polfact 0 "x^4+4*x^2+23" 2 >> coverage.out
./polfact 0 "x^4+4*x^2-23" 0 >> coverage.out
./polfact 0 "x^4+4*x^2-23" 1 >> coverage.out
./polfact 0 "x^4+4*x^2-23" 2 >> coverage.out
./polfact 0 "3x**4-3x**2+x-5" 0 >> coverage.out
./polfact 0 "3x**4-3x**2+x-5" 1 >> coverage.out
./polfact 0 "3x**4-3x**2+x-5" 2 >> coverage.out
./polfact 0 "x^5+15*x+12" 0 >> coverage.out
./polfact 0 "x^5+15*x+12" 1 >> coverage.out
./polfact 0 "x^5+15*x+12" 2 >> coverage.out
./polfact 0 "x**6+x**5+3*x**4+x**3+3*x**2+x+1" 2 >> coverage.out
./polfact 0 "x^7+x+12" 0 >> coverage.out
./polfact 0 "x^7+x+12" 1 >> coverage.out
./polfact 0 "x^7+x+12" 2 >> coverage.out
./polfact 0 "x**9+6*x**3+5" 2 >> coverage.out
./polfact 0 "x^10+2*x^5+23" 0 >> coverage.out
./polfact 0 "x^10+2*x^5+23" 1 >> coverage.out
./polfact 0 "x^10+2*x^5+23" 2 >> coverage.out
./polfact 0 "x^10+2*x^5-23" 0 >> coverage.out
./polfact 0 "x^10+2*x^5-23" 1 >> coverage.out
./polfact 0 "x^10+2*x^5-23" 2 >> coverage.out
./polfact 0 "x**12+x+5" 2 >> coverage.out
./polfact 0 "x**13+3*x+5" 2 >> coverage.out
./polfact 0 "x^17-1" 0 >> coverage.out
./polfact 0 "x^17-1" 1 >> coverage.out
./polfact 0 "x^17-1" 2 >> coverage.out
./polfact 0 "x**129+6*x**4+5" 2 >> coverage.out
./polfact 0 "(x^2-3*x+5)^2*(x+1)^5*(x-23)*x^9" 0 >> coverage.out
./polfact 0 "(x^2-3*x+5)^2*(x+1)^5*(x-23)*x^9" 1 >> coverage.out
./polfact 0 "(x^2-3*x+5)^2*(x+1)^5*(x-23)*x^9" 2 >> coverage.out
./polfact 0 "der(x^8)+gcd(x^7+x^5+2, x^3+43*x)" 0 >> coverage.out
./polfact 0 "der(x^8)+gcd(x^7+x^5+2, x^3+43*x)" 1 >> coverage.out
./polfact 0 "der(x^8)+gcd(x^7+x^5+2, x^3+43*x)" 2 >> coverage.out
./polfact 0 "gcd(x+1,x)+3" 2 >> coverage.out
./polfact 0 "lcm(x+1,x)+3" 2 >> coverage.out
./polfact 0 "gcd(x+1,x**2-1)+2" 2 >> coverage.out
./polfact 0 "lcm(x+1,x**2-1)+2" 2 >> coverage.out
./polfact 0 "gcd(x+1,x*(x**2-1), x**3-1)" 2 >> coverage.out
./polfact 0 "lcm(x+1,x**2-1, x**3-1)" 2 >> coverage.out
./polfact 0 "gcd(x^4, x^7+x^3, x^6)" 2 >> coverage.out
./polfact 0 "lcm(x^4, x^7+x^3, x^6)" 2 >> coverage.out
./polfact 3 "gcd(x+1,x)+3" 2 >> coverage.out
./polfact 3 "lcm(x+1,x)+3" 2 >> coverage.out
./polfact 3 "gcd(x+1,x**2-1)+2" 2 >> coverage.out
./polfact 3 "lcm(x+1,x**2-1)+2" 2 >> coverage.out
./polfact 3 "gcd(x+1,x*(x**2-1), x**3-1)" 2 >> coverage.out
./polfact 3 "lcm(x+1,x**2-1, x**3-1)" 2 >> coverage.out
./polfact 3 "gcd(x^4, x^7+x^3, x^6)" 2 >> coverage.out
./polfact 3 "lcm(x^4, x^7+x^3, x^6)" 2 >> coverage.out
./polfact 0 "(68987*x^2+47773*x+4983)*(61415*x^2+4334*x+343)" 2 >> coverage.out
./polfact 0 "(3789678961*x^2+545543121*x+432143141)*(678585781*x^2+43213515*x+342143153)" 2 >> coverage.out
./polfact 0 "(678967896891*x^2+431545543121*x+43432143141)*(67567856785781*x^2+43213515*x+342143153)" 1 >> coverage.out
./polfact 0 "(x^8-1)/(x^4+1)" 2 >> coverage.out
./polfact 7 "(x^8-1)/(x^4+1)" 2 >> coverage.out
./polfact 0 "(x^8-1)%(x^4+1)" 2 >> coverage.out
./polfact 7 "(x^8-1)%(x^4+1)" 2 >> coverage.out
./polfact 7 "der(x^8)+gcd(x^7+x^5+2, x^3+43*x)" 0 >> coverage.out
./polfact 7 "der(x^8)+gcd(x^7+x^5+2, x^3+43*x)" 1 >> coverage.out
./polfact 7 "der(x^8)+gcd(x^7+x^5+2, x^3+43*x)" 2 >> coverage.out
./polfact "7^21" "x**39-1" 2 >> coverage.out
./polfact "7^21" "x**39" 2 >> coverage.out
./polfact "n(10**19)" "(x**2+23*x-54)*(x**2-42*x+23)" 0 >> coverage.out
./polfact "n(10**19)" "(x**2+23*x-54)*(x**2-42*x+23)" 1 >> coverage.out
./polfact "n(10**19)" "(x**2+23*x-54)*(x**2-42*x+23)" 2 >> coverage.out
./polfact 0 "2.3" 2 >> coverage.out
./polfact ".8" "2" 2 >> coverage.out
./polfact "3.8" "6.2" 2 >> coverage.out
lcov --capture --directory . --output-file polfact.info
make clean
make fsquares
echo -e "\n\n**** FSQUARES ****" >> coverage.out
./fsquares "-2" >> coverage.out
./fsquares "10**15000" >> coverage.out
./fsquares "10**30000" >> coverage.out
./fsquares 0 >> coverage.out
./fsquares 27 >> coverage.out
./fsquares "10**200+54154255642" >> coverage.out
lcov --capture --directory . --output-file fsquares.info
make clean
make fcubes
echo -e "\n\n**** FCUBES ****" >> coverage.out
./fcubes 0 >> coverage.out
./fcubes 16 >> coverage.out
./fcubes 27 >> coverage.out
./fcubes 2414 >> coverage.out
./fcubes 1892 >> coverage.out
./fcubes "10**200+54154255642" >> coverage.out
lcov --capture --directory . --output-file fcubes.info
make clean
make dilog
echo -e "\n\n**** DILOG ****" >> coverage.out
./dilog -1 4 5 >> coverage.out
./dilog 3 -1 5 >> coverage.out
./dilog 2 4 -1 >> coverage.out
./dilog 3 22 23 >> coverage.out
./dilog 3 7 29 >> coverage.out
./dilog 7 23 8 >> coverage.out
./dilog 28 43 "n(120000)" >> coverage.out
./dilog 667 999 "n(10000000000)" >> coverage.out
./dilog 2 173 226 >> coverage.out
./dilog 2 64 226 >> coverage.out
lcov --capture --directory . --output-file dilog.info
make clean
make quad
echo -e "\n\n**** QUAD ****" >> coverage.out
./quad 0 0 0 0 5 6 0 >> coverage.out
./quad 0 0 0 0 5 6 1 >> coverage.out
./quad 1 2 3 4 5 6 0 >> coverage.out
./quad 1 2 3 4 5 6 1 >> coverage.out
./quad 1 0 0 0 7 -12 0 >> coverage.out
./quad 1 0 0 0 7 -12 1 >> coverage.out
./quad 1 2 2 0 0 -89 0 >> coverage.out
./quad 1 2 2 0 0 -89 1 >> coverage.out
./quad 1 3 3 0 0 -76 0 >> coverage.out
./quad 1 3 3 0 0 -76 1 >> coverage.out
./quad 1 0 -991 0 0 -1 0 >> coverage.out
./quad 1 0 -991 0 0 -1 1 >> coverage.out
./quad 5 3 -991 23 42 -1 0 >> coverage.out
./quad 5 3 -991 23 42 -1 1 >> coverage.out
./quad 2 3 7 0 0 -12 0 >> coverage.out
./quad 2 3 7 0 0 -12 1 >> coverage.out
./quad 2 -33 7 0 0 -12 0 >> coverage.out
./quad 2 -33 7 0 0 -12 1 >> coverage.out
lcov --capture --directory . --output-file quad.info
make clean
make contfrac
echo -e "\n\n**** CONTFRAC ****" >> coverage.out
./contfrac 1 2 3 0 >> coverage.out
./contfrac 1 0 991 0 >> coverage.out
./contfrac 5 27 991 0 >> coverage.out
./contfrac 1 2 3 1 >> coverage.out
./contfrac 1 0 991 1 >> coverage.out
./contfrac 5 27 991 1 >> coverage.out
lcov --capture --directory . --output-file contfrac.info
make clean
make quadmod
echo -e "\n\n**** QUADMOD ****" >> coverage.out
./quadmod 1 2 3 7 >> coverage.out
./quadmod 1 0 991 "n(10^5)" >> coverage.out
./quadmod 5 27 43 "n(10^20+3)" >> coverage.out
./quadmod 5 27 82 "n(10^80+5)" >> coverage.out
./quadmod 5 27 82 "2^8" >> coverage.out
./quadmod 125 27 82 25 >> coverage.out
./quadmod 3 8 5 9 >> coverage.out
./quadmod 5 27 82 "2^256" >> coverage.out
./quadmod 0 27 82 "2^256" >> coverage.out
./quadmod 73 27 83 "2^16" >> coverage.out
./quadmod 73 270 83 "2^16" >> coverage.out
./quadmod -1 1 1 19 >> coverage.out
./quadmod -1 2 3 105 >> coverage.out
./quadmod 1 0 -505 361 >> coverage.out
./quadmod -1 0 505 361 >> coverage.out
./quadmod 1 2 3 97 >> coverage.out
./quadmod 0 0 0 0 >> coverage.out
./quadmod 0 0 7 0 >> coverage.out
./quadmod 0 3 7 0 >> coverage.out
./quadmod 0 3 9 0 >> coverage.out
./quadmod 1 3 7 0 >> coverage.out
./quadmod 1 3 2 0 >> coverage.out
lcov --capture --directory . --output-file quadmod.info
make clean
make gaussian
echo -e "\n\n**** GAUSSIAN ****" >> coverage.out
./gaussian 5 1 >> coverage.out
./gaussian 1 1 >> coverage.out
./gaussian "232435+432i" 1 >> coverage.out
./gaussian "10**20+45+(23i)" 1 >> coverage.out
./gaussian "6!! + Re(12+4i) - Im(2 - 3i) * Norm(2 + 4i)" 1 >> coverage.out
./gaussian "200! / 199! + 7# + 300 % 28 + F(24) + L(12) + N(24) + B(32) + P(5)" 1 >> coverage.out
./gaussian "gcd(8 + 4i, 6+3i)" 1 >> coverage.out
./gaussian "isprime(23) + 2*isprime(5) + 4*isprime(1+i)" 0 >> coverage.out
./gaussian "modpow(7,6,0) + modpow(7,6,23)" 0 >> coverage.out
./gaussian "modinv(13,71)" 0 >> coverage.out
./gaussian "gcd(1+i,2,4)" 0 >> coverage.out
./gaussian "lcm(1+i,2,4)" 0 >> coverage.out

lcov --capture --directory . --output-file gaussian.info

while true; do
    read -p "Output OK? (Y/N) " yn
    case $yn in
        [Yy]* ) break;;
        [Nn]* ) exit;;
        * ) echo "Please answer yes or no.";;
    esac
done
LATEST_VERSION="$(curl -Ls https://artifacts.codacy.com/bin/codacy-coverage-reporter/latest)"
curl -Ls -o codacy-coverage-reporter "https://artifacts.codacy.com/bin/codacy-coverage-reporter/${LATEST_VERSION}/codacy-coverage-reporter-linux"
chmod +x codacy-coverage-reporter
./codacy-coverage-reporter report \
 -r ecm.info -r polfact.info -r fsquares.info -r fcubes.info -r dilog.info \
 -r quad.info -r quadmod.info -r contfrac.info -r gaussian.info -r blockly.info
